
Simple Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000012de  00001372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800078  00800078  0000138a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105e  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000485  00000000  00000000  00002c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009db  00000000  00000000  00003103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d0  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8b  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 04 	call	0x812	; 0x812 <main>
      8a:	0c 94 6d 09 	jmp	0x12da	; 0x12da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_setPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_setPINDir+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_setPINDir+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_setPINDir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_setPINDir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_setPINDir+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_setPINDir+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_setPINDir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_setPINDir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_setPINDir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_setPINDir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_setPINDir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_setPINDir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_setPINDir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_setPINDir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_setPINDir+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_setPINDir+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_setPINDir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_setPINDir+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_setPINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(direction==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_setPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_setPINDir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_setPINDir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPINDir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPINDir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(direction==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_setPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPINDir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPINDir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
				CLR_BIT(DDRB,pinnumber);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_setPINDir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_setPINDir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_setPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPINDir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPINDir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_setPINDir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_setPINDir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_setPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPINDir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPINDir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_setPINDir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_setPINDir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_writePIN>:
		break;
	}
}
void DIO_writePIN(unsigned char portname,unsigned char pinnumber,unsigned char val)
{
	switch(portname)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_writePIN+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_writePIN+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_writePIN+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_writePIN+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_writePIN+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_writePIN+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_writePIN+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_writePIN+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_writePIN+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_writePIN+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_writePIN+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_writePIN+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_writePIN+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_writePIN+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_writePIN+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_writePIN+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_writePIN+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_writePIN+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_writePIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_writePIN+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_writePIN+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_writePIN+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_writePIN+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_writePIN+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_writePIN+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_writePIN+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_writePIN+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_writePIN+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_writePIN+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_writePIN+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_writePIN+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_writePIN+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_writePIN+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_writePIN+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_writePIN+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_writePIN+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_writePIN+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_writePIN+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_writePIN+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_togglePIN>:
		break;
	}
}
void DIO_togglePIN(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_togglePIN+0x6>
     2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_togglePIN+0x80>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_togglePIN+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_togglePIN+0x4c>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_togglePIN+0x66>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_togglePIN+0x18>
     2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_togglePIN+0x98>
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_togglePIN+0x32>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_togglePIN+0x4c>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_togglePIN+0x28>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_togglePIN+0x98>
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_togglePIN+0x32>
     2fe:	83 36       	cpi	r24, 0x63	; 99
     300:	e9 f0       	breq	.+58     	; 0x33c <DIO_togglePIN+0x66>
     302:	84 36       	cpi	r24, 0x64	; 100
     304:	a1 f5       	brne	.+104    	; 0x36e <DIO_togglePIN+0x98>
     306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_togglePIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ac 01       	movw	r20, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_togglePIN+0x40>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_togglePIN+0x3c>
     31a:	ba 01       	movw	r22, r20
     31c:	62 27       	eor	r22, r18
     31e:	6b bb       	out	0x1b, r22	; 27
		break;
     320:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
     322:	28 b3       	in	r18, 0x18	; 24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	ac 01       	movw	r20, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_togglePIN+0x5a>
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_togglePIN+0x56>
     334:	ba 01       	movw	r22, r20
     336:	62 27       	eor	r22, r18
     338:	68 bb       	out	0x18, r22	; 24
		break;
     33a:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_togglePIN+0x74>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_togglePIN+0x70>
     34e:	ba 01       	movw	r22, r20
     350:	62 27       	eor	r22, r18
     352:	65 bb       	out	0x15, r22	; 21
		break;
     354:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
     356:	22 b3       	in	r18, 0x12	; 18
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_togglePIN+0x8e>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_togglePIN+0x8a>
     368:	ba 01       	movw	r22, r20
     36a:	62 27       	eor	r22, r18
     36c:	62 bb       	out	0x12, r22	; 18
     36e:	08 95       	ret

00000370 <DIO_readPIN>:
	}
}
unsigned char DIO_readPIN(unsigned char portname,unsigned char pinnumber)
{
	unsigned char val;
	switch(portname)
     370:	84 34       	cpi	r24, 0x44	; 68
     372:	b1 f1       	breq	.+108    	; 0x3e0 <DIO_readPIN+0x70>
     374:	85 34       	cpi	r24, 0x45	; 69
     376:	38 f4       	brcc	.+14     	; 0x386 <DIO_readPIN+0x16>
     378:	82 34       	cpi	r24, 0x42	; 66
     37a:	e1 f0       	breq	.+56     	; 0x3b4 <DIO_readPIN+0x44>
     37c:	83 34       	cpi	r24, 0x43	; 67
     37e:	28 f5       	brcc	.+74     	; 0x3ca <DIO_readPIN+0x5a>
     380:	81 34       	cpi	r24, 0x41	; 65
     382:	c1 f5       	brne	.+112    	; 0x3f4 <DIO_readPIN+0x84>
     384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_readPIN+0x2e>
     386:	82 36       	cpi	r24, 0x62	; 98
     388:	a9 f0       	breq	.+42     	; 0x3b4 <DIO_readPIN+0x44>
     38a:	83 36       	cpi	r24, 0x63	; 99
     38c:	18 f4       	brcc	.+6      	; 0x394 <DIO_readPIN+0x24>
     38e:	81 36       	cpi	r24, 0x61	; 97
     390:	89 f5       	brne	.+98     	; 0x3f4 <DIO_readPIN+0x84>
     392:	05 c0       	rjmp	.+10     	; 0x39e <DIO_readPIN+0x2e>
     394:	83 36       	cpi	r24, 0x63	; 99
     396:	c9 f0       	breq	.+50     	; 0x3ca <DIO_readPIN+0x5a>
     398:	84 36       	cpi	r24, 0x64	; 100
     39a:	61 f5       	brne	.+88     	; 0x3f4 <DIO_readPIN+0x84>
     39c:	21 c0       	rjmp	.+66     	; 0x3e0 <DIO_readPIN+0x70>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pinnumber);
     39e:	29 b3       	in	r18, 0x19	; 25
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	c9 01       	movw	r24, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_readPIN+0x3a>
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	6a 95       	dec	r22
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_readPIN+0x36>
     3ae:	98 2f       	mov	r25, r24
     3b0:	91 70       	andi	r25, 0x01	; 1
		break;
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <DIO_readPIN+0x84>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pinnumber);
     3b4:	26 b3       	in	r18, 0x16	; 22
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	c9 01       	movw	r24, r18
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_readPIN+0x50>
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_readPIN+0x4c>
     3c4:	98 2f       	mov	r25, r24
     3c6:	91 70       	andi	r25, 0x01	; 1
		break;
     3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <DIO_readPIN+0x84>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pinnumber);
     3ca:	23 b3       	in	r18, 0x13	; 19
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_readPIN+0x66>
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	6a 95       	dec	r22
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_readPIN+0x62>
     3da:	98 2f       	mov	r25, r24
     3dc:	91 70       	andi	r25, 0x01	; 1
		break;
     3de:	0a c0       	rjmp	.+20     	; 0x3f4 <DIO_readPIN+0x84>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pinnumber);
     3e0:	20 b3       	in	r18, 0x10	; 16
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	c9 01       	movw	r24, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_readPIN+0x7c>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_readPIN+0x78>
     3f0:	98 2f       	mov	r25, r24
     3f2:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return val;
}
     3f4:	89 2f       	mov	r24, r25
     3f6:	08 95       	ret

000003f8 <DIO_setPORTDir>:
void DIO_setPORTDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
     3f8:	84 34       	cpi	r24, 0x44	; 68
     3fa:	d9 f0       	breq	.+54     	; 0x432 <DIO_setPORTDir+0x3a>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	38 f4       	brcc	.+14     	; 0x40e <DIO_setPORTDir+0x16>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	99 f0       	breq	.+38     	; 0x42a <DIO_setPORTDir+0x32>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	98 f4       	brcc	.+38     	; 0x42e <DIO_setPORTDir+0x36>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	a1 f4       	brne	.+40     	; 0x434 <DIO_setPORTDir+0x3c>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <DIO_setPORTDir+0x2e>
     40e:	82 36       	cpi	r24, 0x62	; 98
     410:	61 f0       	breq	.+24     	; 0x42a <DIO_setPORTDir+0x32>
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	18 f4       	brcc	.+6      	; 0x41c <DIO_setPORTDir+0x24>
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	69 f4       	brne	.+26     	; 0x434 <DIO_setPORTDir+0x3c>
     41a:	05 c0       	rjmp	.+10     	; 0x426 <DIO_setPORTDir+0x2e>
     41c:	83 36       	cpi	r24, 0x63	; 99
     41e:	39 f0       	breq	.+14     	; 0x42e <DIO_setPORTDir+0x36>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	41 f4       	brne	.+16     	; 0x434 <DIO_setPORTDir+0x3c>
     424:	06 c0       	rjmp	.+12     	; 0x432 <DIO_setPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
     426:	6a bb       	out	0x1a, r22	; 26
		break;
     428:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
     42a:	67 bb       	out	0x17, r22	; 23
		break;
     42c:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
     42e:	64 bb       	out	0x14, r22	; 20
		break;
     430:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
     432:	61 bb       	out	0x11, r22	; 17
     434:	08 95       	ret

00000436 <DIO_writePORT>:
		break;
	}
}
void DIO_writePORT(unsigned char portname,unsigned char val)
{
	switch(portname)
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	d9 f0       	breq	.+54     	; 0x470 <DIO_writePORT+0x3a>
     43a:	85 34       	cpi	r24, 0x45	; 69
     43c:	38 f4       	brcc	.+14     	; 0x44c <DIO_writePORT+0x16>
     43e:	82 34       	cpi	r24, 0x42	; 66
     440:	99 f0       	breq	.+38     	; 0x468 <DIO_writePORT+0x32>
     442:	83 34       	cpi	r24, 0x43	; 67
     444:	98 f4       	brcc	.+38     	; 0x46c <DIO_writePORT+0x36>
     446:	81 34       	cpi	r24, 0x41	; 65
     448:	a1 f4       	brne	.+40     	; 0x472 <DIO_writePORT+0x3c>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <DIO_writePORT+0x2e>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	61 f0       	breq	.+24     	; 0x468 <DIO_writePORT+0x32>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	18 f4       	brcc	.+6      	; 0x45a <DIO_writePORT+0x24>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	69 f4       	brne	.+26     	; 0x472 <DIO_writePORT+0x3c>
     458:	05 c0       	rjmp	.+10     	; 0x464 <DIO_writePORT+0x2e>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	39 f0       	breq	.+14     	; 0x46c <DIO_writePORT+0x36>
     45e:	84 36       	cpi	r24, 0x64	; 100
     460:	41 f4       	brne	.+16     	; 0x472 <DIO_writePORT+0x3c>
     462:	06 c0       	rjmp	.+12     	; 0x470 <DIO_writePORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     464:	6b bb       	out	0x1b, r22	; 27
		break;
     466:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     468:	68 bb       	out	0x18, r22	; 24
		break;
     46a:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     46c:	65 bb       	out	0x15, r22	; 21
		break;
     46e:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     470:	62 bb       	out	0x12, r22	; 18
     472:	08 95       	ret

00000474 <DIO_togglePORT>:
		break;
	}
}
void DIO_togglePORT(unsigned char portname)
{
	switch(portname)
     474:	84 34       	cpi	r24, 0x44	; 68
     476:	09 f1       	breq	.+66     	; 0x4ba <DIO_togglePORT+0x46>
     478:	85 34       	cpi	r24, 0x45	; 69
     47a:	38 f4       	brcc	.+14     	; 0x48a <DIO_togglePORT+0x16>
     47c:	82 34       	cpi	r24, 0x42	; 66
     47e:	a9 f0       	breq	.+42     	; 0x4aa <DIO_togglePORT+0x36>
     480:	83 34       	cpi	r24, 0x43	; 67
     482:	b8 f4       	brcc	.+46     	; 0x4b2 <DIO_togglePORT+0x3e>
     484:	81 34       	cpi	r24, 0x41	; 65
     486:	e1 f4       	brne	.+56     	; 0x4c0 <DIO_togglePORT+0x4c>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <DIO_togglePORT+0x2e>
     48a:	82 36       	cpi	r24, 0x62	; 98
     48c:	71 f0       	breq	.+28     	; 0x4aa <DIO_togglePORT+0x36>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	18 f4       	brcc	.+6      	; 0x498 <DIO_togglePORT+0x24>
     492:	81 36       	cpi	r24, 0x61	; 97
     494:	a9 f4       	brne	.+42     	; 0x4c0 <DIO_togglePORT+0x4c>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_togglePORT+0x2e>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	59 f0       	breq	.+22     	; 0x4b2 <DIO_togglePORT+0x3e>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	81 f4       	brne	.+32     	; 0x4c0 <DIO_togglePORT+0x4c>
     4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_togglePORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=(~PORTA);
     4a2:	8b b3       	in	r24, 0x1b	; 27
     4a4:	80 95       	com	r24
     4a6:	8b bb       	out	0x1b, r24	; 27
		break;
     4a8:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=(~PORTB);
     4aa:	88 b3       	in	r24, 0x18	; 24
     4ac:	80 95       	com	r24
     4ae:	88 bb       	out	0x18, r24	; 24
		break;
     4b0:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=(~PORTC);
     4b2:	85 b3       	in	r24, 0x15	; 21
     4b4:	80 95       	com	r24
     4b6:	85 bb       	out	0x15, r24	; 21
		break;
     4b8:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=(~PORTD);
     4ba:	82 b3       	in	r24, 0x12	; 18
     4bc:	80 95       	com	r24
     4be:	82 bb       	out	0x12, r24	; 18
     4c0:	08 95       	ret

000004c2 <DIO_readPORT>:
	}
}
unsigned char DIO_readPORT(unsigned char portname)
{
	unsigned char val;
	switch(portname)
     4c2:	84 34       	cpi	r24, 0x44	; 68
     4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_readPORT+0x3a>
     4c6:	85 34       	cpi	r24, 0x45	; 69
     4c8:	38 f4       	brcc	.+14     	; 0x4d8 <DIO_readPORT+0x16>
     4ca:	82 34       	cpi	r24, 0x42	; 66
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <DIO_readPORT+0x32>
     4ce:	83 34       	cpi	r24, 0x43	; 67
     4d0:	98 f4       	brcc	.+38     	; 0x4f8 <DIO_readPORT+0x36>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	a1 f4       	brne	.+40     	; 0x4fe <DIO_readPORT+0x3c>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <DIO_readPORT+0x2e>
     4d8:	82 36       	cpi	r24, 0x62	; 98
     4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_readPORT+0x32>
     4dc:	83 36       	cpi	r24, 0x63	; 99
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <DIO_readPORT+0x24>
     4e0:	81 36       	cpi	r24, 0x61	; 97
     4e2:	69 f4       	brne	.+26     	; 0x4fe <DIO_readPORT+0x3c>
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <DIO_readPORT+0x2e>
     4e6:	83 36       	cpi	r24, 0x63	; 99
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <DIO_readPORT+0x36>
     4ea:	84 36       	cpi	r24, 0x64	; 100
     4ec:	41 f4       	brne	.+16     	; 0x4fe <DIO_readPORT+0x3c>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <DIO_readPORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
     4f0:	99 b3       	in	r25, 0x19	; 25
		break;
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <DIO_readPORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
     4f4:	96 b3       	in	r25, 0x16	; 22
		break;
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <DIO_readPORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
     4f8:	93 b3       	in	r25, 0x13	; 19
		break;
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <DIO_readPORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
     4fc:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
     4fe:	89 2f       	mov	r24, r25
     500:	08 95       	ret

00000502 <DIO_pullupconnect>:
void DIO_pullupconnect(unsigned char portname,unsigned char pinnumber,unsigned char connect)
{
	DIO_writePIN(portname,pinnumber,connect);
     502:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
}
     506:	08 95       	ret

00000508 <DIO_write_low_nibble>:
void DIO_write_low_nibble(unsigned char portname,unsigned char val)
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	c8 2f       	mov	r28, r24
     50e:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,0,READ_BIT(val,0));
     510:	46 2f       	mov	r20, r22
     512:	41 70       	andi	r20, 0x01	; 1
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,1,READ_BIT(val,1));
     51a:	4d 2f       	mov	r20, r29
     51c:	46 95       	lsr	r20
     51e:	41 70       	andi	r20, 0x01	; 1
     520:	8c 2f       	mov	r24, r28
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,2,READ_BIT(val,2));
     528:	4d 2f       	mov	r20, r29
     52a:	46 95       	lsr	r20
     52c:	46 95       	lsr	r20
     52e:	41 70       	andi	r20, 0x01	; 1
     530:	8c 2f       	mov	r24, r28
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,3,READ_BIT(val,3));
     538:	d6 95       	lsr	r29
     53a:	d6 95       	lsr	r29
     53c:	d6 95       	lsr	r29
     53e:	4d 2f       	mov	r20, r29
     540:	41 70       	andi	r20, 0x01	; 1
     542:	8c 2f       	mov	r24, r28
     544:	63 e0       	ldi	r22, 0x03	; 3
     546:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <DIO_write_high_nibble>:
void DIO_write_high_nibble(unsigned char portname,unsigned char val)
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	c8 2f       	mov	r28, r24
     556:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,4,READ_BIT(val,0));
     558:	46 2f       	mov	r20, r22
     55a:	41 70       	andi	r20, 0x01	; 1
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,5,READ_BIT(val,1));
     562:	4d 2f       	mov	r20, r29
     564:	46 95       	lsr	r20
     566:	41 70       	andi	r20, 0x01	; 1
     568:	8c 2f       	mov	r24, r28
     56a:	65 e0       	ldi	r22, 0x05	; 5
     56c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,6,READ_BIT(val,2));
     570:	4d 2f       	mov	r20, r29
     572:	46 95       	lsr	r20
     574:	46 95       	lsr	r20
     576:	41 70       	andi	r20, 0x01	; 1
     578:	8c 2f       	mov	r24, r28
     57a:	66 e0       	ldi	r22, 0x06	; 6
     57c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_writePIN(portname,7,READ_BIT(val,3));
     580:	d6 95       	lsr	r29
     582:	d6 95       	lsr	r29
     584:	d6 95       	lsr	r29
     586:	4d 2f       	mov	r20, r29
     588:	41 70       	andi	r20, 0x01	; 1
     58a:	8c 2f       	mov	r24, r28
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <keypad_init>:
#include "DIO.h"
#include "keypad.h"

void keypad_init(unsigned char portname)
{
     598:	cf 93       	push	r28
     59a:	c8 2f       	mov	r28, r24
	DIO_setPORTDir(portname,0x0F);
     59c:	6f e0       	ldi	r22, 0x0F	; 15
     59e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_setPORTDir>
	DIO_pullupconnect(portname,4,1);
     5a2:	8c 2f       	mov	r24, r28
     5a4:	64 e0       	ldi	r22, 0x04	; 4
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	0e 94 81 02 	call	0x502	; 0x502 <DIO_pullupconnect>
	DIO_pullupconnect(portname,5,1);
     5ac:	8c 2f       	mov	r24, r28
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	0e 94 81 02 	call	0x502	; 0x502 <DIO_pullupconnect>
	DIO_pullupconnect(portname,6,1);
     5b6:	8c 2f       	mov	r24, r28
     5b8:	66 e0       	ldi	r22, 0x06	; 6
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	0e 94 81 02 	call	0x502	; 0x502 <DIO_pullupconnect>
	DIO_pullupconnect(portname,7,1);
     5c0:	8c 2f       	mov	r24, r28
     5c2:	67 e0       	ldi	r22, 0x07	; 7
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	0e 94 81 02 	call	0x502	; 0x502 <DIO_pullupconnect>
}
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <keypad_read>:
unsigned char keypad_read(unsigned char portname)
{
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	60 97       	sbiw	r28, 0x10	; 16
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	08 2f       	mov	r16, r24
	unsigned char arr[4][4]={ {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'} };
     5ec:	de 01       	movw	r26, r28
     5ee:	11 96       	adiw	r26, 0x01	; 1
     5f0:	e0 e6       	ldi	r30, 0x60	; 96
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <keypad_read+0x28>
     5fe:	ee 24       	eor	r14, r14
     600:	ff 24       	eor	r15, r15
	unsigned char row,col;
	unsigned char val=NOT_PRESSED;
	for(row=0;row<=3;row++)
	{
		DIO_write_low_nibble(portname,0xF);
     602:	80 2f       	mov	r24, r16
     604:	6f e0       	ldi	r22, 0x0F	; 15
     606:	0e 94 84 02 	call	0x508	; 0x508 <DIO_write_low_nibble>
		DIO_writePIN(portname,row,0);
     60a:	80 2f       	mov	r24, r16
     60c:	6e 2d       	mov	r22, r14
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
		for(col=0;col<=3;col++)
     614:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(DIO_readPIN(portname,col+4)==0)
     616:	61 2f       	mov	r22, r17
     618:	6c 5f       	subi	r22, 0xFC	; 252
     61a:	80 2f       	mov	r24, r16
     61c:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_readPIN>
     620:	88 23       	and	r24, r24
     622:	89 f4       	brne	.+34     	; 0x646 <keypad_read+0x78>
			{
				val=arr[row][col];
     624:	f7 01       	movw	r30, r14
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e1 0f       	add	r30, r17
     630:	f1 1d       	adc	r31, r1
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	8c 0f       	add	r24, r28
     638:	9d 1f       	adc	r25, r29
     63a:	e8 0f       	add	r30, r24
     63c:	f9 1f       	adc	r31, r25
     63e:	80 81       	ld	r24, Z
				break;
			}
		}
		if(val != NOT_PRESSED)
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	21 f0       	breq	.+8      	; 0x64c <keypad_read+0x7e>
     644:	0b c0       	rjmp	.+22     	; 0x65c <keypad_read+0x8e>
	unsigned char val=NOT_PRESSED;
	for(row=0;row<=3;row++)
	{
		DIO_write_low_nibble(portname,0xF);
		DIO_writePIN(portname,row,0);
		for(col=0;col<=3;col++)
     646:	1f 5f       	subi	r17, 0xFF	; 255
     648:	14 30       	cpi	r17, 0x04	; 4
     64a:	29 f7       	brne	.-54     	; 0x616 <keypad_read+0x48>
     64c:	08 94       	sec
     64e:	e1 1c       	adc	r14, r1
     650:	f1 1c       	adc	r15, r1
unsigned char keypad_read(unsigned char portname)
{
	unsigned char arr[4][4]={ {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'} };
	unsigned char row,col;
	unsigned char val=NOT_PRESSED;
	for(row=0;row<=3;row++)
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	e9 16       	cp	r14, r25
     656:	f1 04       	cpc	r15, r1
     658:	a1 f6       	brne	.-88     	; 0x602 <keypad_read+0x34>
     65a:	8f ef       	ldi	r24, 0xFF	; 255
		{
			break;
		}
	}
	return val;
     65c:	60 96       	adiw	r28, 0x10	; 16
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	08 95       	ret

00000676 <Enable>:
	LCD_clear_screen();
	LCD_send_cmd(ENTRY_MODE);
}
static void Enable()
{
	DIO_writePIN(LCD_CTRL_PORT,EN,1);
     676:	82 e4       	ldi	r24, 0x42	; 66
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     680:	8f e9       	ldi	r24, 0x9F	; 159
     682:	9f e0       	ldi	r25, 0x0F	; 15
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <Enable+0xe>
     688:	00 c0       	rjmp	.+0      	; 0x68a <Enable+0x14>
     68a:	00 00       	nop
	_delay_ms(2);
	DIO_writePIN(LCD_CTRL_PORT,EN,0);
     68c:	82 e4       	ldi	r24, 0x42	; 66
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
     696:	8f e9       	ldi	r24, 0x9F	; 159
     698:	9f e0       	ldi	r25, 0x0F	; 15
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <Enable+0x24>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <Enable+0x2a>
     6a0:	00 00       	nop
	_delay_ms(2);
}
     6a2:	08 95       	ret

000006a4 <LCD_send_cmd>:
void LCD_send_cmd(char cmd)
{
     6a4:	cf 93       	push	r28
     6a6:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
	DIO_writePORT(LCD_DATA_PORT,cmd);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
     6a8:	82 e4       	ldi	r24, 0x42	; 66
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd>>4);
     6b2:	6c 2f       	mov	r22, r28
     6b4:	62 95       	swap	r22
     6b6:	6f 70       	andi	r22, 0x0F	; 15
     6b8:	81 e4       	ldi	r24, 0x41	; 65
     6ba:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
     6be:	0e 94 3b 03 	call	0x676	; 0x676 <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd);
     6c2:	81 e4       	ldi	r24, 0x41	; 65
     6c4:	6c 2f       	mov	r22, r28
     6c6:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
     6ca:	0e 94 3b 03 	call	0x676	; 0x676 <Enable>
     6ce:	8f ec       	ldi	r24, 0xCF	; 207
     6d0:	97 e0       	ldi	r25, 0x07	; 7
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCD_send_cmd+0x2e>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_send_cmd+0x34>
     6d8:	00 00       	nop
	#endif
	_delay_ms(1);
}
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <LCD_send_char>:
void LCD_send_char(char data)
{
     6de:	cf 93       	push	r28
     6e0:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
	DIO_writePORT(LCD_DATA_PORT,data);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
     6e2:	82 e4       	ldi	r24, 0x42	; 66
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,data>>4);
     6ec:	6c 2f       	mov	r22, r28
     6ee:	62 95       	swap	r22
     6f0:	6f 70       	andi	r22, 0x0F	; 15
     6f2:	81 e4       	ldi	r24, 0x41	; 65
     6f4:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
     6f8:	0e 94 3b 03 	call	0x676	; 0x676 <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,data);
     6fc:	81 e4       	ldi	r24, 0x41	; 65
     6fe:	6c 2f       	mov	r22, r28
     700:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_write_high_nibble>
	Enable();
     704:	0e 94 3b 03 	call	0x676	; 0x676 <Enable>
     708:	8f ec       	ldi	r24, 0xCF	; 207
     70a:	97 e0       	ldi	r25, 0x07	; 7
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_send_char+0x2e>
     710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_send_char+0x34>
     712:	00 00       	nop
	#endif
	_delay_ms(1);
}
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <LCD_clear_screen>:
void LCD_clear_screen()
{
	LCD_send_cmd(CLR_SCREEN);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
     71e:	8f e4       	ldi	r24, 0x4F	; 79
     720:	96 e4       	ldi	r25, 0x46	; 70
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LCD_clear_screen+0xa>
     726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_clear_screen+0x10>
     728:	00 00       	nop
	_delay_ms(9);
}
     72a:	08 95       	ret

0000072c <LCD_return_home>:
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
     732:	8f e4       	ldi	r24, 0x4F	; 79
     734:	96 e4       	ldi	r25, 0x46	; 70
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <LCD_return_home+0xa>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_return_home+0x10>
     73c:	00 00       	nop
	_delay_ms(9);
}
     73e:	08 95       	ret

00000740 <LCD_init>:
     740:	8f e7       	ldi	r24, 0x7F	; 127
     742:	99 ea       	ldi	r25, 0xA9	; 169
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	81 50       	subi	r24, 0x01	; 1
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	a0 40       	sbci	r26, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <LCD_init+0x6>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_init+0x10>
     750:	00 00       	nop
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
	LCD_send_cmd(0x38);
	#elif defined FOUR_BIT_MODE
	DIO_setPINDir(LCD_DATA_PORT,4,1);
     752:	81 e4       	ldi	r24, 0x41	; 65
     754:	64 e0       	ldi	r22, 0x04	; 4
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,5,1);
     75c:	81 e4       	ldi	r24, 0x41	; 65
     75e:	65 e0       	ldi	r22, 0x05	; 5
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,6,1);
     766:	81 e4       	ldi	r24, 0x41	; 65
     768:	66 e0       	ldi	r22, 0x06	; 6
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,7,1);
     770:	81 e4       	ldi	r24, 0x41	; 65
     772:	67 e0       	ldi	r22, 0x07	; 7
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,EN,1);
     77a:	82 e4       	ldi	r24, 0x42	; 66
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
     784:	82 e4       	ldi	r24, 0x42	; 66
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
     78e:	82 e4       	ldi	r24, 0x42	; 66
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPINDir>
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
     798:	82 e4       	ldi	r24, 0x42	; 66
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_writePIN>
	LCD_return_home();
     7a2:	0e 94 96 03 	call	0x72c	; 0x72c <LCD_return_home>
	LCD_send_cmd(0x28);
     7a6:	88 e2       	ldi	r24, 0x28	; 40
     7a8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
	#endif
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
     7ac:	8e e0       	ldi	r24, 0x0E	; 14
     7ae:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
	LCD_clear_screen();
     7b2:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
	LCD_send_cmd(ENTRY_MODE);
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
}
     7bc:	08 95       	ret

000007be <LCD_send_string>:
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	while( (*ptr) != 0)
     7c4:	88 81       	ld	r24, Y
     7c6:	88 23       	and	r24, r24
     7c8:	31 f0       	breq	.+12     	; 0x7d6 <LCD_send_string+0x18>
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
     7ca:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*ptr) != 0)
	{
		LCD_send_char(*ptr);
     7cc:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
	while( (*ptr) != 0)
     7d0:	89 91       	ld	r24, Y+
     7d2:	88 23       	and	r24, r24
     7d4:	d9 f7       	brne	.-10     	; 0x7cc <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <LCD_move_cursor>:
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
     7dc:	28 2f       	mov	r18, r24
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	70 f4       	brcc	.+28     	; 0x800 <LCD_move_cursor+0x24>
     7e4:	61 31       	cpi	r22, 0x11	; 17
     7e6:	70 f4       	brcc	.+28     	; 0x804 <LCD_move_cursor+0x28>
     7e8:	66 23       	and	r22, r22
     7ea:	71 f0       	breq	.+28     	; 0x808 <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row == 1)
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <LCD_move_cursor+0x1a>
	{
		data = 0x80 + column - 1;
     7f0:	96 2f       	mov	r25, r22
     7f2:	91 58       	subi	r25, 0x81	; 129
     7f4:	0a c0       	rjmp	.+20     	; 0x80a <LCD_move_cursor+0x2e>
	}
	else if(row == 2)
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	41 f4       	brne	.+16     	; 0x80a <LCD_move_cursor+0x2e>
	{
		data = 0xC0 + column - 1;
     7fa:	96 2f       	mov	r25, r22
     7fc:	91 54       	subi	r25, 0x41	; 65
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <LCD_move_cursor+0x2e>
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
	{
		data=0x80;
     800:	90 e8       	ldi	r25, 0x80	; 128
     802:	03 c0       	rjmp	.+6      	; 0x80a <LCD_move_cursor+0x2e>
     804:	90 e8       	ldi	r25, 0x80	; 128
     806:	01 c0       	rjmp	.+2      	; 0x80a <LCD_move_cursor+0x2e>
     808:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row == 2)
	{
		data = 0xC0 + column - 1;
	}
	LCD_send_cmd(data);
     80a:	89 2f       	mov	r24, r25
     80c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_send_cmd>
     810:	08 95       	ret

00000812 <main>:
unsigned char arr[4];
unsigned short num1,num2;
unsigned long result,res_test;

int main(void)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	28 97       	sbiw	r28, 0x08	; 8
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
	unsigned char i,digits,operation,val,flag;
	keypad_init('D');
     826:	84 e4       	ldi	r24, 0x44	; 68
     828:	0e 94 cc 02 	call	0x598	; 0x598 <keypad_init>
	LCD_init();
     82c:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_init>
	while(1)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
     830:	0f 2e       	mov	r0, r31
     832:	fb e7       	ldi	r31, 0x7B	; 123
     834:	4f 2e       	mov	r4, r31
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	5f 2e       	mov	r5, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	0f 2e       	mov	r0, r31
     83e:	fd ef       	ldi	r31, 0xFD	; 253
     840:	2f 2e       	mov	r2, r31
     842:	ff ef       	ldi	r31, 0xFF	; 255
     844:	3f 2e       	mov	r3, r31
     846:	f0 2d       	mov	r31, r0
     848:	24 0c       	add	r2, r4
     84a:	35 1c       	adc	r3, r5
		num1=num2=result=digits=flag=0;
     84c:	31 01       	movw	r6, r2

unsigned char arr[4];
unsigned short num1,num2;
unsigned long result,res_test;

int main(void)
     84e:	62 01       	movw	r12, r4
     850:	08 94       	sec
     852:	c1 1c       	adc	r12, r1
     854:	d1 1c       	adc	r13, r1
						}
						//calculate number of digits of the result
						res_test=result;
						while(res_test != 0)
						{
							res_test = res_test/10;
     856:	0f 2e       	mov	r0, r31
     858:	fa e0       	ldi	r31, 0x0A	; 10
     85a:	8f 2e       	mov	r8, r31
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	9f 2e       	mov	r9, r31
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	af 2e       	mov	r10, r31
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	bf 2e       	mov	r11, r31
     868:	f0 2d       	mov	r31, r0

unsigned char arr[4];
unsigned short num1,num2;
unsigned long result,res_test;

int main(void)
     86a:	c1 01       	movw	r24, r2
     86c:	05 96       	adiw	r24, 0x05	; 5
     86e:	98 87       	std	Y+8, r25	; 0x08
     870:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char i,digits,operation,val,flag;
	keypad_init('D');
	LCD_init();
	while(1)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
     872:	ef ef       	ldi	r30, 0xFF	; 255
     874:	d2 01       	movw	r26, r4
     876:	ec 93       	st	X, r30
     878:	aa e7       	ldi	r26, 0x7A	; 122
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	ec 93       	st	X, r30
     87e:	11 97       	sbiw	r26, 0x01	; 1
     880:	ec 93       	st	X, r30
     882:	d1 01       	movw	r26, r2
     884:	ec 93       	st	X, r30
		num1=num2=result=digits=flag=0;
     886:	10 92 7e 00 	sts	0x007E, r1
     88a:	10 92 7f 00 	sts	0x007F, r1
     88e:	10 92 80 00 	sts	0x0080, r1
     892:	10 92 81 00 	sts	0x0081, r1
     896:	10 92 7d 00 	sts	0x007D, r1
     89a:	10 92 7c 00 	sts	0x007C, r1
     89e:	10 92 83 00 	sts	0x0083, r1
     8a2:	10 92 82 00 	sts	0x0082, r1
     8a6:	73 01       	movw	r14, r6

unsigned char arr[4];
unsigned short num1,num2;
unsigned long result,res_test;

int main(void)
     8a8:	83 01       	movw	r16, r6
		//get the first number
		for(i=0;i<=3;i++)
		{
			do
			{
				val=keypad_read('D');
     8aa:	84 e4       	ldi	r24, 0x44	; 68
     8ac:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_read>
     8b0:	89 83       	std	Y+1, r24	; 0x01
			} while (val == NOT_PRESSED);
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	d1 f3       	breq	.-12     	; 0x8aa <__stack+0x4b>
			if(val == 'C')
     8b6:	83 34       	cpi	r24, 0x43	; 67
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <__stack+0x61>
			{
				flag=1;
				LCD_clear_screen();
     8ba:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
     8be:	99 c4       	rjmp	.+2354   	; 0x11f2 <__stack+0x993>
				break;
			}
			else if( (val == '+') || (val == '-') || (val == '*') || (val == '/') )
     8c0:	8b 32       	cpi	r24, 0x2B	; 43
     8c2:	49 f0       	breq	.+18     	; 0x8d6 <__stack+0x77>
     8c4:	8d 32       	cpi	r24, 0x2D	; 45
     8c6:	51 f0       	breq	.+20     	; 0x8dc <__stack+0x7d>
     8c8:	8a 32       	cpi	r24, 0x2A	; 42
     8ca:	59 f0       	breq	.+22     	; 0x8e2 <__stack+0x83>
     8cc:	8f 32       	cpi	r24, 0x2F	; 47
     8ce:	c1 f4       	brne	.+48     	; 0x900 <__stack+0xa1>
     8d0:	19 81       	ldd	r17, Y+1	; 0x01
		//get the first number
		for(i=0;i<=3;i++)
		{
			do
			{
				val=keypad_read('D');
     8d2:	81 2f       	mov	r24, r17
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <__stack+0x87>
     8d6:	19 81       	ldd	r17, Y+1	; 0x01
     8d8:	81 2f       	mov	r24, r17
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <__stack+0x87>
     8dc:	19 81       	ldd	r17, Y+1	; 0x01
     8de:	81 2f       	mov	r24, r17
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
     8e2:	19 81       	ldd	r17, Y+1	; 0x01
     8e4:	81 2f       	mov	r24, r17
				LCD_clear_screen();
				break;
			}
			else if( (val == '+') || (val == '-') || (val == '*') || (val == '/') )
			{
				LCD_send_char(val);
     8e6:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
     8ea:	8f e7       	ldi	r24, 0x7F	; 127
     8ec:	9a e1       	ldi	r25, 0x1A	; 26
     8ee:	a6 e0       	ldi	r26, 0x06	; 6
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	a0 40       	sbci	r26, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__stack+0x91>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__stack+0x9b>
     8fa:	00 00       	nop
     8fc:	1a 83       	std	Y+2, r17	; 0x02
     8fe:	94 c4       	rjmp	.+2344   	; 0x1228 <__stack+0x9c9>
				_delay_ms(250);
				break;
			}
			else
			{
				LCD_send_char(val);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
				arr[i] = val-48;
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	80 53       	subi	r24, 0x30	; 48
     90a:	d8 01       	movw	r26, r16
     90c:	8d 93       	st	X+, r24
     90e:	8d 01       	movw	r16, r26
     910:	8f e7       	ldi	r24, 0x7F	; 127
     912:	9a e1       	ldi	r25, 0x1A	; 26
     914:	a6 e0       	ldi	r26, 0x06	; 6
     916:	81 50       	subi	r24, 0x01	; 1
     918:	90 40       	sbci	r25, 0x00	; 0
     91a:	a0 40       	sbci	r26, 0x00	; 0
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0xb7>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0xc1>
     920:	00 00       	nop
	while(1)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
		num1=num2=result=digits=flag=0;
		//get the first number
		for(i=0;i<=3;i++)
     922:	0c 15       	cp	r16, r12
     924:	1d 05       	cpc	r17, r13
     926:	09 f6       	brne	.-126    	; 0x8aa <__stack+0x4b>
     928:	19 81       	ldd	r17, Y+1	; 0x01
     92a:	7e c4       	rjmp	.+2300   	; 0x1228 <__stack+0x9c9>
			}
		}
		if(flag == 0)
		{
			//check if the number was 4-digits
		    if( (val != '+') && (val != '-') && (val != '*') && (val != '/') )
     92c:	1d 32       	cpi	r17, 0x2D	; 45
     92e:	d9 f0       	breq	.+54     	; 0x966 <__stack+0x107>
     930:	1a 32       	cpi	r17, 0x2A	; 42
     932:	c9 f0       	breq	.+50     	; 0x966 <__stack+0x107>
     934:	1f 32       	cpi	r17, 0x2F	; 47
     936:	b9 f0       	breq	.+46     	; 0x966 <__stack+0x107>
		    {
			   do
			   {
				   val=keypad_read('D');
     938:	84 e4       	ldi	r24, 0x44	; 68
     93a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_read>
			   } while (val == NOT_PRESSED);
     93e:	8f 3f       	cpi	r24, 0xFF	; 255
     940:	d9 f3       	breq	.-10     	; 0x938 <__stack+0xd9>
     942:	18 2f       	mov	r17, r24
			   if(val == 'C')
     944:	83 34       	cpi	r24, 0x43	; 67
     946:	19 f4       	brne	.+6      	; 0x94e <__stack+0xef>
		 	   {
				   flag=1;
				   LCD_clear_screen();
     948:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
     94c:	52 c4       	rjmp	.+2212   	; 0x11f2 <__stack+0x993>
			   }
			   else
			   {
				   LCD_send_char(val);
     94e:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
     952:	8f e7       	ldi	r24, 0x7F	; 127
     954:	9a e1       	ldi	r25, 0x1A	; 26
     956:	a6 e0       	ldi	r26, 0x06	; 6
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	90 40       	sbci	r25, 0x00	; 0
     95c:	a0 40       	sbci	r26, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0xf9>
     960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x103>
     962:	00 00       	nop
			//check if the number was 4-digits
		    if( (val != '+') && (val != '-') && (val != '*') && (val != '/') )
		    {
			   do
			   {
				   val=keypad_read('D');
     964:	1a 83       	std	Y+2, r17	; 0x02
			}			
			if(flag == 0)
			{
				//storing the first number
				i=0;
				while( (arr[i] != NOT_PRESSED) && (i<=3) )
     966:	a8 e7       	ldi	r26, 0x78	; 120
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	2c 91       	ld	r18, X
     96c:	2f 3f       	cpi	r18, 0xFF	; 255
     96e:	21 f1       	breq	.+72     	; 0x9b8 <__stack+0x159>
     970:	80 91 82 00 	lds	r24, 0x0082
     974:	90 91 83 00 	lds	r25, 0x0083
     978:	e9 e7       	ldi	r30, 0x79	; 121
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	6f 81       	ldd	r22, Y+7	; 0x07
     97e:	78 85       	ldd	r23, Y+8	; 0x08
				{
					num1 = num1*10;
     980:	ac 01       	movw	r20, r24
     982:	44 0f       	add	r20, r20
     984:	55 1f       	adc	r21, r21
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	84 0f       	add	r24, r20
     994:	95 1f       	adc	r25, r21
					num1 = num1+arr[i];
     996:	82 0f       	add	r24, r18
     998:	91 1d       	adc	r25, r1
			}			
			if(flag == 0)
			{
				//storing the first number
				i=0;
				while( (arr[i] != NOT_PRESSED) && (i<=3) )
     99a:	21 91       	ld	r18, Z+
     99c:	2f 3f       	cpi	r18, 0xFF	; 255
     99e:	29 f4       	brne	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	90 93 83 00 	sts	0x0083, r25
     9a4:	80 93 82 00 	sts	0x0082, r24
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0x159>
     9aa:	e6 17       	cp	r30, r22
     9ac:	f7 07       	cpc	r31, r23
     9ae:	41 f7       	brne	.-48     	; 0x980 <__stack+0x121>
     9b0:	90 93 83 00 	sts	0x0083, r25
     9b4:	80 93 82 00 	sts	0x0082, r24
				{
					num1 = num1*10;
					num1 = num1+arr[i];
					i++;
				}
				arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	f2 01       	movw	r30, r4
     9bc:	80 83       	st	Z, r24
     9be:	aa e7       	ldi	r26, 0x7A	; 122
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	8c 93       	st	X, r24
     9c4:	e9 e7       	ldi	r30, 0x79	; 121
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 83       	st	Z, r24
     9ca:	d1 01       	movw	r26, r2
     9cc:	8c 93       	st	X, r24
     9ce:	19 82       	std	Y+1, r1	; 0x01
					{
						val=keypad_read('D');
					} while (val == NOT_PRESSED);
					if(val == 'C')
					{
						flag=1;
     9d0:	01 e0       	ldi	r16, 0x01	; 1
				//get the second number
				for(i=0;i<=3;i++)
				{
					do
					{
						val=keypad_read('D');
     9d2:	84 e4       	ldi	r24, 0x44	; 68
     9d4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_read>
     9d8:	8b 83       	std	Y+3, r24	; 0x03
					} while (val == NOT_PRESSED);
     9da:	8f 3f       	cpi	r24, 0xFF	; 255
     9dc:	d1 f3       	breq	.-12     	; 0x9d2 <__stack+0x173>
				//get the second number
				for(i=0;i<=3;i++)
				{
					do
					{
						val=keypad_read('D');
     9de:	18 2f       	mov	r17, r24
					} while (val == NOT_PRESSED);
					if(val == 'C')
     9e0:	83 34       	cpi	r24, 0x43	; 67
     9e2:	21 f4       	brne	.+8      	; 0x9ec <__stack+0x18d>
					{
						flag=1;
						LCD_clear_screen();
     9e4:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
					{
						val=keypad_read('D');
					} while (val == NOT_PRESSED);
					if(val == 'C')
					{
						flag=1;
     9e8:	09 83       	std	Y+1, r16	; 0x01
     9ea:	1d c0       	rjmp	.+58     	; 0xa26 <__stack+0x1c7>
						LCD_clear_screen();
					}
					else if(val == '=')
     9ec:	8d 33       	cpi	r24, 0x3D	; 61
     9ee:	69 f4       	brne	.+26     	; 0xa0a <__stack+0x1ab>
					{
						LCD_send_char(val);
     9f0:	8d e3       	ldi	r24, 0x3D	; 61
     9f2:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
     9f6:	8f e7       	ldi	r24, 0x7F	; 127
     9f8:	9a e1       	ldi	r25, 0x1A	; 26
     9fa:	a6 e0       	ldi	r26, 0x06	; 6
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	a0 40       	sbci	r26, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <__stack+0x19d>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <__stack+0x1a7>
     a06:	00 00       	nop
     a08:	15 c0       	rjmp	.+42     	; 0xa34 <__stack+0x1d5>
						_delay_ms(250);
						break;
					}
					else
					{
						LCD_send_char(val);
     a0a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
						arr[i] = val-48;
     a0e:	10 53       	subi	r17, 0x30	; 48
     a10:	d7 01       	movw	r26, r14
     a12:	1c 93       	st	X, r17
     a14:	8f e7       	ldi	r24, 0x7F	; 127
     a16:	9a e1       	ldi	r25, 0x1A	; 26
     a18:	a6 e0       	ldi	r26, 0x06	; 6
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	a0 40       	sbci	r26, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <__stack+0x1bb>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <__stack+0x1c5>
     a24:	00 00       	nop
     a26:	08 94       	sec
     a28:	e1 1c       	adc	r14, r1
     a2a:	f1 1c       	adc	r15, r1
					num1 = num1+arr[i];
					i++;
				}
				arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
				//get the second number
				for(i=0;i<=3;i++)
     a2c:	ec 14       	cp	r14, r12
     a2e:	fd 04       	cpc	r15, r13
     a30:	81 f6       	brne	.-96     	; 0x9d2 <__stack+0x173>
     a32:	1b 81       	ldd	r17, Y+3	; 0x03
						LCD_send_char(val);
						arr[i] = val-48;
						_delay_ms(250);
					}
				}
				if(flag == 0)
     a34:	99 81       	ldd	r25, Y+1	; 0x01
     a36:	99 23       	and	r25, r25
     a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	d8 c3       	rjmp	.+1968   	; 0x11ec <__stack+0x98d>
				{
					//check if the second number was 4-digits
					if(val != '=')
     a3c:	1d 33       	cpi	r17, 0x3D	; 61
     a3e:	a9 f0       	breq	.+42     	; 0xa6a <__stack+0x20b>
					{
						do
						{
							val=keypad_read('D');
     a40:	84 e4       	ldi	r24, 0x44	; 68
     a42:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_read>
						} while (val == NOT_PRESSED);
     a46:	8f 3f       	cpi	r24, 0xFF	; 255
     a48:	d9 f3       	breq	.-10     	; 0xa40 <__stack+0x1e1>
						if(val == 'C')
     a4a:	83 34       	cpi	r24, 0x43	; 67
     a4c:	19 f4       	brne	.+6      	; 0xa54 <__stack+0x1f5>
						{
							flag=1;
							LCD_clear_screen();
     a4e:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
     a52:	cf c3       	rjmp	.+1950   	; 0x11f2 <__stack+0x993>
						}
						else
						{
							LCD_send_char(val);
     a54:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
     a58:	8f e7       	ldi	r24, 0x7F	; 127
     a5a:	9a e1       	ldi	r25, 0x1A	; 26
     a5c:	a6 e0       	ldi	r26, 0x06	; 6
     a5e:	81 50       	subi	r24, 0x01	; 1
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	a0 40       	sbci	r26, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <__stack+0x1ff>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <__stack+0x209>
     a68:	00 00       	nop
					}
					if(flag == 0)
					{
						//storing the second number
						i=0;
						while( (arr[i] != NOT_PRESSED) && (i<=3) )
     a6a:	a8 e7       	ldi	r26, 0x78	; 120
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	2c 91       	ld	r18, X
     a70:	2f 3f       	cpi	r18, 0xFF	; 255
     a72:	21 f1       	breq	.+72     	; 0xabc <__stack+0x25d>
     a74:	80 91 7c 00 	lds	r24, 0x007C
     a78:	90 91 7d 00 	lds	r25, 0x007D
     a7c:	e9 e7       	ldi	r30, 0x79	; 121
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	6f 81       	ldd	r22, Y+7	; 0x07
     a82:	78 85       	ldd	r23, Y+8	; 0x08
						{
							num2= num2*10;
     a84:	ac 01       	movw	r20, r24
     a86:	44 0f       	add	r20, r20
     a88:	55 1f       	adc	r21, r21
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	84 0f       	add	r24, r20
     a98:	95 1f       	adc	r25, r21
							num2= num2+arr[i];
     a9a:	82 0f       	add	r24, r18
     a9c:	91 1d       	adc	r25, r1
					}
					if(flag == 0)
					{
						//storing the second number
						i=0;
						while( (arr[i] != NOT_PRESSED) && (i<=3) )
     a9e:	21 91       	ld	r18, Z+
     aa0:	2f 3f       	cpi	r18, 0xFF	; 255
     aa2:	29 f4       	brne	.+10     	; 0xaae <__stack+0x24f>
     aa4:	90 93 7d 00 	sts	0x007D, r25
     aa8:	80 93 7c 00 	sts	0x007C, r24
     aac:	07 c0       	rjmp	.+14     	; 0xabc <__stack+0x25d>
     aae:	e6 17       	cp	r30, r22
     ab0:	f7 07       	cpc	r31, r23
     ab2:	41 f7       	brne	.-48     	; 0xa84 <__stack+0x225>
     ab4:	90 93 7d 00 	sts	0x007D, r25
     ab8:	80 93 7c 00 	sts	0x007C, r24
						{
							num2= num2*10;
							num2= num2+arr[i];
							i++;
						}
						switch(operation)
     abc:	ba 81       	ldd	r27, Y+2	; 0x02
     abe:	bb 32       	cpi	r27, 0x2B	; 43
     ac0:	69 f0       	breq	.+26     	; 0xadc <__stack+0x27d>
     ac2:	bc 32       	cpi	r27, 0x2C	; 44
     ac4:	20 f4       	brcc	.+8      	; 0xace <__stack+0x26f>
     ac6:	ba 32       	cpi	r27, 0x2A	; 42
     ac8:	09 f0       	breq	.+2      	; 0xacc <__stack+0x26d>
     aca:	62 c0       	rjmp	.+196    	; 0xb90 <__stack+0x331>
     acc:	31 c0       	rjmp	.+98     	; 0xb30 <__stack+0x2d1>
     ace:	ea 81       	ldd	r30, Y+2	; 0x02
     ad0:	ed 32       	cpi	r30, 0x2D	; 45
     ad2:	c9 f0       	breq	.+50     	; 0xb06 <__stack+0x2a7>
     ad4:	ef 32       	cpi	r30, 0x2F	; 47
     ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x27b>
     ad8:	5b c0       	rjmp	.+182    	; 0xb90 <__stack+0x331>
     ada:	45 c0       	rjmp	.+138    	; 0xb66 <__stack+0x307>
						{
							case '+':
							result = num1+num2;
     adc:	80 91 7c 00 	lds	r24, 0x007C
     ae0:	90 91 7d 00 	lds	r25, 0x007D
     ae4:	20 91 82 00 	lds	r18, 0x0082
     ae8:	30 91 83 00 	lds	r19, 0x0083
     aec:	82 0f       	add	r24, r18
     aee:	93 1f       	adc	r25, r19
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	80 93 7e 00 	sts	0x007E, r24
     af8:	90 93 7f 00 	sts	0x007F, r25
     afc:	a0 93 80 00 	sts	0x0080, r26
     b00:	b0 93 81 00 	sts	0x0081, r27
							break;
     b04:	45 c0       	rjmp	.+138    	; 0xb90 <__stack+0x331>
							case '-':
							result = num1-num2;
     b06:	80 91 82 00 	lds	r24, 0x0082
     b0a:	90 91 83 00 	lds	r25, 0x0083
     b0e:	20 91 7c 00 	lds	r18, 0x007C
     b12:	30 91 7d 00 	lds	r19, 0x007D
     b16:	82 1b       	sub	r24, r18
     b18:	93 0b       	sbc	r25, r19
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	80 93 7e 00 	sts	0x007E, r24
     b22:	90 93 7f 00 	sts	0x007F, r25
     b26:	a0 93 80 00 	sts	0x0080, r26
     b2a:	b0 93 81 00 	sts	0x0081, r27
							break;
     b2e:	30 c0       	rjmp	.+96     	; 0xb90 <__stack+0x331>
							case '*':
							result = (long)num1*num2;
     b30:	80 91 82 00 	lds	r24, 0x0082
     b34:	90 91 83 00 	lds	r25, 0x0083
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	20 91 7c 00 	lds	r18, 0x007C
     b40:	30 91 7d 00 	lds	r19, 0x007D
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	bc 01       	movw	r22, r24
     b4a:	cd 01       	movw	r24, r26
     b4c:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsi3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	80 93 7e 00 	sts	0x007E, r24
     b58:	90 93 7f 00 	sts	0x007F, r25
     b5c:	a0 93 80 00 	sts	0x0080, r26
     b60:	b0 93 81 00 	sts	0x0081, r27
							/* I made promotion here beacuse the
							result may be higher than 65,536 */
							break;
     b64:	15 c0       	rjmp	.+42     	; 0xb90 <__stack+0x331>
							case '/':
							result = num1/num2;
     b66:	80 91 82 00 	lds	r24, 0x0082
     b6a:	90 91 83 00 	lds	r25, 0x0083
     b6e:	60 91 7c 00 	lds	r22, 0x007C
     b72:	70 91 7d 00 	lds	r23, 0x007D
     b76:	0e 94 37 09 	call	0x126e	; 0x126e <__udivmodhi4>
     b7a:	cb 01       	movw	r24, r22
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	80 93 7e 00 	sts	0x007E, r24
     b84:	90 93 7f 00 	sts	0x007F, r25
     b88:	a0 93 80 00 	sts	0x0080, r26
     b8c:	b0 93 81 00 	sts	0x0081, r27
							break;
						}
						//calculate number of digits of the result
						res_test=result;
     b90:	80 91 7e 00 	lds	r24, 0x007E
     b94:	90 91 7f 00 	lds	r25, 0x007F
     b98:	a0 91 80 00 	lds	r26, 0x0080
     b9c:	b0 91 81 00 	lds	r27, 0x0081
     ba0:	8b 83       	std	Y+3, r24	; 0x03
     ba2:	9c 83       	std	Y+4, r25	; 0x04
     ba4:	ad 83       	std	Y+5, r26	; 0x05
     ba6:	be 83       	std	Y+6, r27	; 0x06
     ba8:	80 93 84 00 	sts	0x0084, r24
     bac:	90 93 85 00 	sts	0x0085, r25
     bb0:	a0 93 86 00 	sts	0x0086, r26
     bb4:	b0 93 87 00 	sts	0x0087, r27
						while(res_test != 0)
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	a1 05       	cpc	r26, r1
     bbc:	b1 05       	cpc	r27, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__stack+0x363>
     bc0:	22 c3       	rjmp	.+1604   	; 0x1206 <__stack+0x9a7>
     bc2:	8c 01       	movw	r16, r24
     bc4:	9d 01       	movw	r18, r26
	keypad_init('D');
	LCD_init();
	while(1)
	{
		arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
		num1=num2=result=digits=flag=0;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	e8 2e       	mov	r14, r24
						}
						//calculate number of digits of the result
						res_test=result;
						while(res_test != 0)
						{
							res_test = res_test/10;
     bca:	c9 01       	movw	r24, r18
     bcc:	b8 01       	movw	r22, r16
     bce:	a5 01       	movw	r20, r10
     bd0:	94 01       	movw	r18, r8
     bd2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     bd6:	89 01       	movw	r16, r18
     bd8:	9a 01       	movw	r18, r20
							digits++;
     bda:	e3 94       	inc	r14
							result = num1/num2;
							break;
						}
						//calculate number of digits of the result
						res_test=result;
						while(res_test != 0)
     bdc:	01 15       	cp	r16, r1
     bde:	11 05       	cpc	r17, r1
     be0:	21 05       	cpc	r18, r1
     be2:	31 05       	cpc	r19, r1
     be4:	91 f7       	brne	.-28     	; 0xbca <__stack+0x36b>
     be6:	8e 2d       	mov	r24, r14
     be8:	00 93 84 00 	sts	0x0084, r16
     bec:	10 93 85 00 	sts	0x0085, r17
     bf0:	20 93 86 00 	sts	0x0086, r18
     bf4:	30 93 87 00 	sts	0x0087, r19
						{
							res_test = res_test/10;
							digits++;
						}
						//printing the result
						switch(digits)
     bf8:	84 30       	cpi	r24, 0x04	; 4
     bfa:	09 f4       	brne	.+2      	; 0xbfe <__stack+0x39f>
     bfc:	6e c0       	rjmp	.+220    	; 0xcda <__stack+0x47b>
     bfe:	85 30       	cpi	r24, 0x05	; 5
     c00:	40 f4       	brcc	.+16     	; 0xc12 <__stack+0x3b3>
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	c1 f0       	breq	.+48     	; 0xc36 <__stack+0x3d7>
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	98 f5       	brcc	.+102    	; 0xc70 <__stack+0x411>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <__stack+0x3b1>
     c0e:	ee c2       	rjmp	.+1500   	; 0x11ec <__stack+0x98d>
     c10:	0d c0       	rjmp	.+26     	; 0xc2c <__stack+0x3cd>
     c12:	86 30       	cpi	r24, 0x06	; 6
     c14:	09 f4       	brne	.+2      	; 0xc18 <__stack+0x3b9>
     c16:	13 c1       	rjmp	.+550    	; 0xe3e <__stack+0x5df>
     c18:	86 30       	cpi	r24, 0x06	; 6
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <__stack+0x3bf>
     c1c:	ab c0       	rjmp	.+342    	; 0xd74 <__stack+0x515>
     c1e:	87 30       	cpi	r24, 0x07	; 7
     c20:	09 f4       	brne	.+2      	; 0xc24 <__stack+0x3c5>
     c22:	8a c1       	rjmp	.+788    	; 0xf38 <__stack+0x6d9>
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	09 f0       	breq	.+2      	; 0xc2a <__stack+0x3cb>
     c28:	e1 c2       	rjmp	.+1474   	; 0x11ec <__stack+0x98d>
     c2a:	27 c2       	rjmp	.+1102   	; 0x107a <__stack+0x81b>
						{
							case 1:
							LCD_send_char(result+48);
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	80 5d       	subi	r24, 0xD0	; 208
     c30:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     c34:	e8 c2       	rjmp	.+1488   	; 0x1206 <__stack+0x9a7>
							case 2:
							LCD_send_char(result/10+48);
     c36:	6b 81       	ldd	r22, Y+3	; 0x03
     c38:	7c 81       	ldd	r23, Y+4	; 0x04
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	a5 01       	movw	r20, r10
     c40:	94 01       	movw	r18, r8
     c42:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     c46:	82 2f       	mov	r24, r18
     c48:	80 5d       	subi	r24, 0xD0	; 208
     c4a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
     c4e:	60 91 7e 00 	lds	r22, 0x007E
     c52:	70 91 7f 00 	lds	r23, 0x007F
     c56:	80 91 80 00 	lds	r24, 0x0080
     c5a:	90 91 81 00 	lds	r25, 0x0081
     c5e:	a5 01       	movw	r20, r10
     c60:	94 01       	movw	r18, r8
     c62:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     c66:	86 2f       	mov	r24, r22
     c68:	80 5d       	subi	r24, 0xD0	; 208
     c6a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     c6e:	cb c2       	rjmp	.+1430   	; 0x1206 <__stack+0x9a7>
							case 3:
							LCD_send_char(result/100+48);
     c70:	6b 81       	ldd	r22, Y+3	; 0x03
     c72:	7c 81       	ldd	r23, Y+4	; 0x04
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	24 e6       	ldi	r18, 0x64	; 100
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     c84:	82 2f       	mov	r24, r18
     c86:	80 5d       	subi	r24, 0xD0	; 208
     c88:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
     c8c:	60 91 7e 00 	lds	r22, 0x007E
     c90:	70 91 7f 00 	lds	r23, 0x007F
     c94:	80 91 80 00 	lds	r24, 0x0080
     c98:	90 91 81 00 	lds	r25, 0x0081
     c9c:	a5 01       	movw	r20, r10
     c9e:	94 01       	movw	r18, r8
     ca0:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ca4:	ca 01       	movw	r24, r20
     ca6:	b9 01       	movw	r22, r18
     ca8:	a5 01       	movw	r20, r10
     caa:	94 01       	movw	r18, r8
     cac:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     cb0:	86 2f       	mov	r24, r22
     cb2:	80 5d       	subi	r24, 0xD0	; 208
     cb4:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
     cb8:	60 91 7e 00 	lds	r22, 0x007E
     cbc:	70 91 7f 00 	lds	r23, 0x007F
     cc0:	80 91 80 00 	lds	r24, 0x0080
     cc4:	90 91 81 00 	lds	r25, 0x0081
     cc8:	a5 01       	movw	r20, r10
     cca:	94 01       	movw	r18, r8
     ccc:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     cd0:	86 2f       	mov	r24, r22
     cd2:	80 5d       	subi	r24, 0xD0	; 208
     cd4:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     cd8:	96 c2       	rjmp	.+1324   	; 0x1206 <__stack+0x9a7>
							case 4:
							LCD_send_char(result/1000+48);
     cda:	6b 81       	ldd	r22, Y+3	; 0x03
     cdc:	7c 81       	ldd	r23, Y+4	; 0x04
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	9e 81       	ldd	r25, Y+6	; 0x06
     ce2:	28 ee       	ldi	r18, 0xE8	; 232
     ce4:	33 e0       	ldi	r19, 0x03	; 3
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     cee:	82 2f       	mov	r24, r18
     cf0:	80 5d       	subi	r24, 0xD0	; 208
     cf2:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100)%10+48);
     cf6:	60 91 7e 00 	lds	r22, 0x007E
     cfa:	70 91 7f 00 	lds	r23, 0x007F
     cfe:	80 91 80 00 	lds	r24, 0x0080
     d02:	90 91 81 00 	lds	r25, 0x0081
     d06:	24 e6       	ldi	r18, 0x64	; 100
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d12:	ca 01       	movw	r24, r20
     d14:	b9 01       	movw	r22, r18
     d16:	a5 01       	movw	r20, r10
     d18:	94 01       	movw	r18, r8
     d1a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d1e:	86 2f       	mov	r24, r22
     d20:	80 5d       	subi	r24, 0xD0	; 208
     d22:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
     d26:	60 91 7e 00 	lds	r22, 0x007E
     d2a:	70 91 7f 00 	lds	r23, 0x007F
     d2e:	80 91 80 00 	lds	r24, 0x0080
     d32:	90 91 81 00 	lds	r25, 0x0081
     d36:	a5 01       	movw	r20, r10
     d38:	94 01       	movw	r18, r8
     d3a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d3e:	ca 01       	movw	r24, r20
     d40:	b9 01       	movw	r22, r18
     d42:	a5 01       	movw	r20, r10
     d44:	94 01       	movw	r18, r8
     d46:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d4a:	86 2f       	mov	r24, r22
     d4c:	80 5d       	subi	r24, 0xD0	; 208
     d4e:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
     d52:	60 91 7e 00 	lds	r22, 0x007E
     d56:	70 91 7f 00 	lds	r23, 0x007F
     d5a:	80 91 80 00 	lds	r24, 0x0080
     d5e:	90 91 81 00 	lds	r25, 0x0081
     d62:	a5 01       	movw	r20, r10
     d64:	94 01       	movw	r18, r8
     d66:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d6a:	86 2f       	mov	r24, r22
     d6c:	80 5d       	subi	r24, 0xD0	; 208
     d6e:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     d72:	49 c2       	rjmp	.+1170   	; 0x1206 <__stack+0x9a7>
							case 5:
							LCD_send_char(result/10000+48);
     d74:	6b 81       	ldd	r22, Y+3	; 0x03
     d76:	7c 81       	ldd	r23, Y+4	; 0x04
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	20 e1       	ldi	r18, 0x10	; 16
     d7e:	37 e2       	ldi	r19, 0x27	; 39
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     d88:	82 2f       	mov	r24, r18
     d8a:	80 5d       	subi	r24, 0xD0	; 208
     d8c:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/1000)%10+48);
     d90:	60 91 7e 00 	lds	r22, 0x007E
     d94:	70 91 7f 00 	lds	r23, 0x007F
     d98:	80 91 80 00 	lds	r24, 0x0080
     d9c:	90 91 81 00 	lds	r25, 0x0081
     da0:	28 ee       	ldi	r18, 0xE8	; 232
     da2:	33 e0       	ldi	r19, 0x03	; 3
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     dac:	ca 01       	movw	r24, r20
     dae:	b9 01       	movw	r22, r18
     db0:	a5 01       	movw	r20, r10
     db2:	94 01       	movw	r18, r8
     db4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     db8:	86 2f       	mov	r24, r22
     dba:	80 5d       	subi	r24, 0xD0	; 208
     dbc:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100)%10+48);
     dc0:	60 91 7e 00 	lds	r22, 0x007E
     dc4:	70 91 7f 00 	lds	r23, 0x007F
     dc8:	80 91 80 00 	lds	r24, 0x0080
     dcc:	90 91 81 00 	lds	r25, 0x0081
     dd0:	24 e6       	ldi	r18, 0x64	; 100
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ddc:	ca 01       	movw	r24, r20
     dde:	b9 01       	movw	r22, r18
     de0:	a5 01       	movw	r20, r10
     de2:	94 01       	movw	r18, r8
     de4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     de8:	86 2f       	mov	r24, r22
     dea:	80 5d       	subi	r24, 0xD0	; 208
     dec:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
     df0:	60 91 7e 00 	lds	r22, 0x007E
     df4:	70 91 7f 00 	lds	r23, 0x007F
     df8:	80 91 80 00 	lds	r24, 0x0080
     dfc:	90 91 81 00 	lds	r25, 0x0081
     e00:	a5 01       	movw	r20, r10
     e02:	94 01       	movw	r18, r8
     e04:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e08:	ca 01       	movw	r24, r20
     e0a:	b9 01       	movw	r22, r18
     e0c:	a5 01       	movw	r20, r10
     e0e:	94 01       	movw	r18, r8
     e10:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e14:	86 2f       	mov	r24, r22
     e16:	80 5d       	subi	r24, 0xD0	; 208
     e18:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
     e1c:	60 91 7e 00 	lds	r22, 0x007E
     e20:	70 91 7f 00 	lds	r23, 0x007F
     e24:	80 91 80 00 	lds	r24, 0x0080
     e28:	90 91 81 00 	lds	r25, 0x0081
     e2c:	a5 01       	movw	r20, r10
     e2e:	94 01       	movw	r18, r8
     e30:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e34:	86 2f       	mov	r24, r22
     e36:	80 5d       	subi	r24, 0xD0	; 208
     e38:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     e3c:	e4 c1       	rjmp	.+968    	; 0x1206 <__stack+0x9a7>
							case 6:
							LCD_send_char(result/100000+48);
     e3e:	6b 81       	ldd	r22, Y+3	; 0x03
     e40:	7c 81       	ldd	r23, Y+4	; 0x04
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	20 ea       	ldi	r18, 0xA0	; 160
     e48:	36 e8       	ldi	r19, 0x86	; 134
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e52:	82 2f       	mov	r24, r18
     e54:	80 5d       	subi	r24, 0xD0	; 208
     e56:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10000)%10+48);
     e5a:	60 91 7e 00 	lds	r22, 0x007E
     e5e:	70 91 7f 00 	lds	r23, 0x007F
     e62:	80 91 80 00 	lds	r24, 0x0080
     e66:	90 91 81 00 	lds	r25, 0x0081
     e6a:	20 e1       	ldi	r18, 0x10	; 16
     e6c:	37 e2       	ldi	r19, 0x27	; 39
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e76:	ca 01       	movw	r24, r20
     e78:	b9 01       	movw	r22, r18
     e7a:	a5 01       	movw	r20, r10
     e7c:	94 01       	movw	r18, r8
     e7e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     e82:	86 2f       	mov	r24, r22
     e84:	80 5d       	subi	r24, 0xD0	; 208
     e86:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/1000)%10+48);
     e8a:	60 91 7e 00 	lds	r22, 0x007E
     e8e:	70 91 7f 00 	lds	r23, 0x007F
     e92:	80 91 80 00 	lds	r24, 0x0080
     e96:	90 91 81 00 	lds	r25, 0x0081
     e9a:	28 ee       	ldi	r18, 0xE8	; 232
     e9c:	33 e0       	ldi	r19, 0x03	; 3
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ea6:	ca 01       	movw	r24, r20
     ea8:	b9 01       	movw	r22, r18
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     eb2:	86 2f       	mov	r24, r22
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100)%10+48);
     eba:	60 91 7e 00 	lds	r22, 0x007E
     ebe:	70 91 7f 00 	lds	r23, 0x007F
     ec2:	80 91 80 00 	lds	r24, 0x0080
     ec6:	90 91 81 00 	lds	r25, 0x0081
     eca:	24 e6       	ldi	r18, 0x64	; 100
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ed6:	ca 01       	movw	r24, r20
     ed8:	b9 01       	movw	r22, r18
     eda:	a5 01       	movw	r20, r10
     edc:	94 01       	movw	r18, r8
     ede:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ee2:	86 2f       	mov	r24, r22
     ee4:	80 5d       	subi	r24, 0xD0	; 208
     ee6:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
     eea:	60 91 7e 00 	lds	r22, 0x007E
     eee:	70 91 7f 00 	lds	r23, 0x007F
     ef2:	80 91 80 00 	lds	r24, 0x0080
     ef6:	90 91 81 00 	lds	r25, 0x0081
     efa:	a5 01       	movw	r20, r10
     efc:	94 01       	movw	r18, r8
     efe:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f02:	ca 01       	movw	r24, r20
     f04:	b9 01       	movw	r22, r18
     f06:	a5 01       	movw	r20, r10
     f08:	94 01       	movw	r18, r8
     f0a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f0e:	86 2f       	mov	r24, r22
     f10:	80 5d       	subi	r24, 0xD0	; 208
     f12:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
     f16:	60 91 7e 00 	lds	r22, 0x007E
     f1a:	70 91 7f 00 	lds	r23, 0x007F
     f1e:	80 91 80 00 	lds	r24, 0x0080
     f22:	90 91 81 00 	lds	r25, 0x0081
     f26:	a5 01       	movw	r20, r10
     f28:	94 01       	movw	r18, r8
     f2a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f2e:	86 2f       	mov	r24, r22
     f30:	80 5d       	subi	r24, 0xD0	; 208
     f32:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
     f36:	67 c1       	rjmp	.+718    	; 0x1206 <__stack+0x9a7>
							case 7:
							LCD_move_cursor(2,1);
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_move_cursor>
							LCD_send_string("Result=");
     f40:	80 e7       	ldi	r24, 0x70	; 112
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_send_string>
							LCD_send_char(result/1000000+48);
     f48:	60 91 7e 00 	lds	r22, 0x007E
     f4c:	70 91 7f 00 	lds	r23, 0x007F
     f50:	80 91 80 00 	lds	r24, 0x0080
     f54:	90 91 81 00 	lds	r25, 0x0081
     f58:	20 e4       	ldi	r18, 0x40	; 64
     f5a:	32 e4       	ldi	r19, 0x42	; 66
     f5c:	4f e0       	ldi	r20, 0x0F	; 15
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f64:	82 2f       	mov	r24, r18
     f66:	80 5d       	subi	r24, 0xD0	; 208
     f68:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100000)%10+48);
     f6c:	60 91 7e 00 	lds	r22, 0x007E
     f70:	70 91 7f 00 	lds	r23, 0x007F
     f74:	80 91 80 00 	lds	r24, 0x0080
     f78:	90 91 81 00 	lds	r25, 0x0081
     f7c:	20 ea       	ldi	r18, 0xA0	; 160
     f7e:	36 e8       	ldi	r19, 0x86	; 134
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f88:	ca 01       	movw	r24, r20
     f8a:	b9 01       	movw	r22, r18
     f8c:	a5 01       	movw	r20, r10
     f8e:	94 01       	movw	r18, r8
     f90:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     f94:	86 2f       	mov	r24, r22
     f96:	80 5d       	subi	r24, 0xD0	; 208
     f98:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10000)%10+48);
     f9c:	60 91 7e 00 	lds	r22, 0x007E
     fa0:	70 91 7f 00 	lds	r23, 0x007F
     fa4:	80 91 80 00 	lds	r24, 0x0080
     fa8:	90 91 81 00 	lds	r25, 0x0081
     fac:	20 e1       	ldi	r18, 0x10	; 16
     fae:	37 e2       	ldi	r19, 0x27	; 39
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     fb8:	ca 01       	movw	r24, r20
     fba:	b9 01       	movw	r22, r18
     fbc:	a5 01       	movw	r20, r10
     fbe:	94 01       	movw	r18, r8
     fc0:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     fc4:	86 2f       	mov	r24, r22
     fc6:	80 5d       	subi	r24, 0xD0	; 208
     fc8:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/1000)%10+48);
     fcc:	60 91 7e 00 	lds	r22, 0x007E
     fd0:	70 91 7f 00 	lds	r23, 0x007F
     fd4:	80 91 80 00 	lds	r24, 0x0080
     fd8:	90 91 81 00 	lds	r25, 0x0081
     fdc:	28 ee       	ldi	r18, 0xE8	; 232
     fde:	33 e0       	ldi	r19, 0x03	; 3
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     fe8:	ca 01       	movw	r24, r20
     fea:	b9 01       	movw	r22, r18
     fec:	a5 01       	movw	r20, r10
     fee:	94 01       	movw	r18, r8
     ff0:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
     ff4:	86 2f       	mov	r24, r22
     ff6:	80 5d       	subi	r24, 0xD0	; 208
     ff8:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100)%10+48);
     ffc:	60 91 7e 00 	lds	r22, 0x007E
    1000:	70 91 7f 00 	lds	r23, 0x007F
    1004:	80 91 80 00 	lds	r24, 0x0080
    1008:	90 91 81 00 	lds	r25, 0x0081
    100c:	24 e6       	ldi	r18, 0x64	; 100
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1018:	ca 01       	movw	r24, r20
    101a:	b9 01       	movw	r22, r18
    101c:	a5 01       	movw	r20, r10
    101e:	94 01       	movw	r18, r8
    1020:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1024:	86 2f       	mov	r24, r22
    1026:	80 5d       	subi	r24, 0xD0	; 208
    1028:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
    102c:	60 91 7e 00 	lds	r22, 0x007E
    1030:	70 91 7f 00 	lds	r23, 0x007F
    1034:	80 91 80 00 	lds	r24, 0x0080
    1038:	90 91 81 00 	lds	r25, 0x0081
    103c:	a5 01       	movw	r20, r10
    103e:	94 01       	movw	r18, r8
    1040:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1044:	ca 01       	movw	r24, r20
    1046:	b9 01       	movw	r22, r18
    1048:	a5 01       	movw	r20, r10
    104a:	94 01       	movw	r18, r8
    104c:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1050:	86 2f       	mov	r24, r22
    1052:	80 5d       	subi	r24, 0xD0	; 208
    1054:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
    1058:	60 91 7e 00 	lds	r22, 0x007E
    105c:	70 91 7f 00 	lds	r23, 0x007F
    1060:	80 91 80 00 	lds	r24, 0x0080
    1064:	90 91 81 00 	lds	r25, 0x0081
    1068:	a5 01       	movw	r20, r10
    106a:	94 01       	movw	r18, r8
    106c:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1070:	86 2f       	mov	r24, r22
    1072:	80 5d       	subi	r24, 0xD0	; 208
    1074:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
    1078:	c6 c0       	rjmp	.+396    	; 0x1206 <__stack+0x9a7>
							case 8:
							LCD_move_cursor(2,1);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_move_cursor>
							LCD_send_string("Result=");
    1082:	80 e7       	ldi	r24, 0x70	; 112
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_send_string>
							LCD_send_char(result/10000000+48);
    108a:	60 91 7e 00 	lds	r22, 0x007E
    108e:	70 91 7f 00 	lds	r23, 0x007F
    1092:	80 91 80 00 	lds	r24, 0x0080
    1096:	90 91 81 00 	lds	r25, 0x0081
    109a:	20 e8       	ldi	r18, 0x80	; 128
    109c:	36 e9       	ldi	r19, 0x96	; 150
    109e:	48 e9       	ldi	r20, 0x98	; 152
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    10a6:	82 2f       	mov	r24, r18
    10a8:	80 5d       	subi	r24, 0xD0	; 208
    10aa:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/1000000)%10+48);
    10ae:	60 91 7e 00 	lds	r22, 0x007E
    10b2:	70 91 7f 00 	lds	r23, 0x007F
    10b6:	80 91 80 00 	lds	r24, 0x0080
    10ba:	90 91 81 00 	lds	r25, 0x0081
    10be:	20 e4       	ldi	r18, 0x40	; 64
    10c0:	32 e4       	ldi	r19, 0x42	; 66
    10c2:	4f e0       	ldi	r20, 0x0F	; 15
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    10ca:	ca 01       	movw	r24, r20
    10cc:	b9 01       	movw	r22, r18
    10ce:	a5 01       	movw	r20, r10
    10d0:	94 01       	movw	r18, r8
    10d2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    10d6:	86 2f       	mov	r24, r22
    10d8:	80 5d       	subi	r24, 0xD0	; 208
    10da:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100000)%10+48);
    10de:	60 91 7e 00 	lds	r22, 0x007E
    10e2:	70 91 7f 00 	lds	r23, 0x007F
    10e6:	80 91 80 00 	lds	r24, 0x0080
    10ea:	90 91 81 00 	lds	r25, 0x0081
    10ee:	20 ea       	ldi	r18, 0xA0	; 160
    10f0:	36 e8       	ldi	r19, 0x86	; 134
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    10fa:	ca 01       	movw	r24, r20
    10fc:	b9 01       	movw	r22, r18
    10fe:	a5 01       	movw	r20, r10
    1100:	94 01       	movw	r18, r8
    1102:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1106:	86 2f       	mov	r24, r22
    1108:	80 5d       	subi	r24, 0xD0	; 208
    110a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10000)%10+48);
    110e:	60 91 7e 00 	lds	r22, 0x007E
    1112:	70 91 7f 00 	lds	r23, 0x007F
    1116:	80 91 80 00 	lds	r24, 0x0080
    111a:	90 91 81 00 	lds	r25, 0x0081
    111e:	20 e1       	ldi	r18, 0x10	; 16
    1120:	37 e2       	ldi	r19, 0x27	; 39
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    112a:	ca 01       	movw	r24, r20
    112c:	b9 01       	movw	r22, r18
    112e:	a5 01       	movw	r20, r10
    1130:	94 01       	movw	r18, r8
    1132:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1136:	86 2f       	mov	r24, r22
    1138:	80 5d       	subi	r24, 0xD0	; 208
    113a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/1000)%10+48);
    113e:	60 91 7e 00 	lds	r22, 0x007E
    1142:	70 91 7f 00 	lds	r23, 0x007F
    1146:	80 91 80 00 	lds	r24, 0x0080
    114a:	90 91 81 00 	lds	r25, 0x0081
    114e:	28 ee       	ldi	r18, 0xE8	; 232
    1150:	33 e0       	ldi	r19, 0x03	; 3
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    115a:	ca 01       	movw	r24, r20
    115c:	b9 01       	movw	r22, r18
    115e:	a5 01       	movw	r20, r10
    1160:	94 01       	movw	r18, r8
    1162:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1166:	86 2f       	mov	r24, r22
    1168:	80 5d       	subi	r24, 0xD0	; 208
    116a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/100)%10+48);
    116e:	60 91 7e 00 	lds	r22, 0x007E
    1172:	70 91 7f 00 	lds	r23, 0x007F
    1176:	80 91 80 00 	lds	r24, 0x0080
    117a:	90 91 81 00 	lds	r25, 0x0081
    117e:	24 e6       	ldi	r18, 0x64	; 100
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    118a:	ca 01       	movw	r24, r20
    118c:	b9 01       	movw	r22, r18
    118e:	a5 01       	movw	r20, r10
    1190:	94 01       	movw	r18, r8
    1192:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    1196:	86 2f       	mov	r24, r22
    1198:	80 5d       	subi	r24, 0xD0	; 208
    119a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char((result/10)%10+48);
    119e:	60 91 7e 00 	lds	r22, 0x007E
    11a2:	70 91 7f 00 	lds	r23, 0x007F
    11a6:	80 91 80 00 	lds	r24, 0x0080
    11aa:	90 91 81 00 	lds	r25, 0x0081
    11ae:	a5 01       	movw	r20, r10
    11b0:	94 01       	movw	r18, r8
    11b2:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    11b6:	ca 01       	movw	r24, r20
    11b8:	b9 01       	movw	r22, r18
    11ba:	a5 01       	movw	r20, r10
    11bc:	94 01       	movw	r18, r8
    11be:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    11c2:	86 2f       	mov	r24, r22
    11c4:	80 5d       	subi	r24, 0xD0	; 208
    11c6:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							LCD_send_char(result%10+48);
    11ca:	60 91 7e 00 	lds	r22, 0x007E
    11ce:	70 91 7f 00 	lds	r23, 0x007F
    11d2:	80 91 80 00 	lds	r24, 0x0080
    11d6:	90 91 81 00 	lds	r25, 0x0081
    11da:	a5 01       	movw	r20, r10
    11dc:	94 01       	movw	r18, r8
    11de:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodsi4>
    11e2:	86 2f       	mov	r24, r22
    11e4:	80 5d       	subi	r24, 0xD0	; 208
    11e6:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_send_char>
							break;
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <__stack+0x9a7>
						}
					}
				}
			}
		}
		if(flag == 1)
    11ec:	99 81       	ldd	r25, Y+1	; 0x01
    11ee:	91 30       	cpi	r25, 0x01	; 1
    11f0:	51 f4       	brne	.+20     	; 0x1206 <__stack+0x9a7>
    11f2:	8f e7       	ldi	r24, 0x7F	; 127
    11f4:	9a e1       	ldi	r25, 0x1A	; 26
    11f6:	a6 e0       	ldi	r26, 0x06	; 6
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	90 40       	sbci	r25, 0x00	; 0
    11fc:	a0 40       	sbci	r26, 0x00	; 0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <__stack+0x999>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <__stack+0x9a3>
    1202:	00 00       	nop
    1204:	36 cb       	rjmp	.-2452   	; 0x872 <__stack+0x13>
		}
		else
		{
			do 
			{
				val=keypad_read('D');
    1206:	84 e4       	ldi	r24, 0x44	; 68
    1208:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_read>
			} while (val == NOT_PRESSED);
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	d9 f3       	breq	.-10     	; 0x1206 <__stack+0x9a7>
			LCD_clear_screen();
    1210:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_clear_screen>
    1214:	8f e7       	ldi	r24, 0x7F	; 127
    1216:	9a e1       	ldi	r25, 0x1A	; 26
    1218:	a6 e0       	ldi	r26, 0x06	; 6
    121a:	81 50       	subi	r24, 0x01	; 1
    121c:	90 40       	sbci	r25, 0x00	; 0
    121e:	a0 40       	sbci	r26, 0x00	; 0
    1220:	e1 f7       	brne	.-8      	; 0x121a <__stack+0x9bb>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <__stack+0x9c5>
    1224:	00 00       	nop
    1226:	25 cb       	rjmp	.-2486   	; 0x872 <__stack+0x13>
			}
		}
		if(flag == 0)
		{
			//check if the number was 4-digits
		    if( (val != '+') && (val != '-') && (val != '*') && (val != '/') )
    1228:	1b 32       	cpi	r17, 0x2B	; 43
    122a:	09 f0       	breq	.+2      	; 0x122e <__stack+0x9cf>
    122c:	7f cb       	rjmp	.-2306   	; 0x92c <__stack+0xcd>
    122e:	9b cb       	rjmp	.-2250   	; 0x966 <__stack+0x107>

00001230 <__mulsi3>:
    1230:	62 9f       	mul	r22, r18
    1232:	d0 01       	movw	r26, r0
    1234:	73 9f       	mul	r23, r19
    1236:	f0 01       	movw	r30, r0
    1238:	82 9f       	mul	r24, r18
    123a:	e0 0d       	add	r30, r0
    123c:	f1 1d       	adc	r31, r1
    123e:	64 9f       	mul	r22, r20
    1240:	e0 0d       	add	r30, r0
    1242:	f1 1d       	adc	r31, r1
    1244:	92 9f       	mul	r25, r18
    1246:	f0 0d       	add	r31, r0
    1248:	83 9f       	mul	r24, r19
    124a:	f0 0d       	add	r31, r0
    124c:	74 9f       	mul	r23, r20
    124e:	f0 0d       	add	r31, r0
    1250:	65 9f       	mul	r22, r21
    1252:	f0 0d       	add	r31, r0
    1254:	99 27       	eor	r25, r25
    1256:	72 9f       	mul	r23, r18
    1258:	b0 0d       	add	r27, r0
    125a:	e1 1d       	adc	r30, r1
    125c:	f9 1f       	adc	r31, r25
    125e:	63 9f       	mul	r22, r19
    1260:	b0 0d       	add	r27, r0
    1262:	e1 1d       	adc	r30, r1
    1264:	f9 1f       	adc	r31, r25
    1266:	bd 01       	movw	r22, r26
    1268:	cf 01       	movw	r24, r30
    126a:	11 24       	eor	r1, r1
    126c:	08 95       	ret

0000126e <__udivmodhi4>:
    126e:	aa 1b       	sub	r26, r26
    1270:	bb 1b       	sub	r27, r27
    1272:	51 e1       	ldi	r21, 0x11	; 17
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <__udivmodhi4_ep>

00001276 <__udivmodhi4_loop>:
    1276:	aa 1f       	adc	r26, r26
    1278:	bb 1f       	adc	r27, r27
    127a:	a6 17       	cp	r26, r22
    127c:	b7 07       	cpc	r27, r23
    127e:	10 f0       	brcs	.+4      	; 0x1284 <__udivmodhi4_ep>
    1280:	a6 1b       	sub	r26, r22
    1282:	b7 0b       	sbc	r27, r23

00001284 <__udivmodhi4_ep>:
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	5a 95       	dec	r21
    128a:	a9 f7       	brne	.-22     	; 0x1276 <__udivmodhi4_loop>
    128c:	80 95       	com	r24
    128e:	90 95       	com	r25
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	08 95       	ret

00001296 <__udivmodsi4>:
    1296:	a1 e2       	ldi	r26, 0x21	; 33
    1298:	1a 2e       	mov	r1, r26
    129a:	aa 1b       	sub	r26, r26
    129c:	bb 1b       	sub	r27, r27
    129e:	fd 01       	movw	r30, r26
    12a0:	0d c0       	rjmp	.+26     	; 0x12bc <__udivmodsi4_ep>

000012a2 <__udivmodsi4_loop>:
    12a2:	aa 1f       	adc	r26, r26
    12a4:	bb 1f       	adc	r27, r27
    12a6:	ee 1f       	adc	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	a2 17       	cp	r26, r18
    12ac:	b3 07       	cpc	r27, r19
    12ae:	e4 07       	cpc	r30, r20
    12b0:	f5 07       	cpc	r31, r21
    12b2:	20 f0       	brcs	.+8      	; 0x12bc <__udivmodsi4_ep>
    12b4:	a2 1b       	sub	r26, r18
    12b6:	b3 0b       	sbc	r27, r19
    12b8:	e4 0b       	sbc	r30, r20
    12ba:	f5 0b       	sbc	r31, r21

000012bc <__udivmodsi4_ep>:
    12bc:	66 1f       	adc	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	1a 94       	dec	r1
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <__udivmodsi4_loop>
    12c8:	60 95       	com	r22
    12ca:	70 95       	com	r23
    12cc:	80 95       	com	r24
    12ce:	90 95       	com	r25
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	bd 01       	movw	r22, r26
    12d6:	cf 01       	movw	r24, r30
    12d8:	08 95       	ret

000012da <_exit>:
    12da:	f8 94       	cli

000012dc <__stop_program>:
    12dc:	ff cf       	rjmp	.-2      	; 0x12dc <__stop_program>
